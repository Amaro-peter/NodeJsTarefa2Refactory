// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AuthenticationStatus {
  SUCCESS
  USER_NOT_EXISTS
  INCORRECT_PASSWORD
  RECOVER_PASSWORD
  INVALID_TOKEN
  BLOCKED
}

enum UserRole {
  ADMIN
  DEFAULT
}

model AuthenticationAudit {
  id         String               @id @default(uuid())
  ipAddress  String?              @map("ip_address")
  remotePort String?              @map("remote_port")
  userAgent  String?              @map("user_agent")
  origin     String?
  status     AuthenticationStatus
  userId     Int?                 @map("user_id")
  user       User?                @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt], name: "idx_auth_audit_user_date")
  @@map("authentication_audit")
}

model User {
  id           Int       @id @default(autoincrement())
  publicId     String    @unique @default(uuid()) @map("public_id")
  name         String
  email        String    @unique
  passwordHash String    @map("password_hash")
  photo        String?
  cpf          String    @unique
  posts        Post[]
  comments     Comment[]
  likes        Like[]

  loginAttempts Int       @default(0) @map("login_attempts")
  lastLogin     DateTime? @map("last_login")
  role          UserRole  @default(DEFAULT)

  token          String?   @unique
  tokenExpiresAt DateTime? @map("token_expires_at")

  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")
  passwordChangedAt DateTime? @map("password_changed_at")

  authenticationAudits AuthenticationAudit[]

  @@index([name], name: "idx_user_name")
  @@index([token], name: "idx_user_token")
  @@map("users")
}

model Post {
  id        Int       @id @default(autoincrement())
  publicId  String    @unique @default(uuid()) @map("public_id")
  title     String
  content   String
  createdAt DateTime  @default(now()) @map("created_at")
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int       @map("author_id")
  comments  Comment[]
  likes     Like[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction)
  authorId  Int      @map("author_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: NoAction)
  postId    Int      @map("post_id")
  likes     Like[]

  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  publicId  String   @unique @default(uuid()) @map("public_id")
  createdAt DateTime @default(now()) @map("created_at")
  author    User     @relation(fields: [authorId], references: [id], onDelete: NoAction)
  authorId  Int      @map("author_id")
  post      Post?    @relation(fields: [postId], references: [id], onDelete: NoAction)
  postId    Int?     @map("post_id")
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: NoAction)
  commentId Int?     @map("comment_id")

  @@map("likes")
}
